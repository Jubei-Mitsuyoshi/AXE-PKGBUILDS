# Maintainer: Ivailo Monev <xakepa10@gmail.com>
# http://liquorix.net/sources/

# Features this kernel doesn't provide;
#
#   * Debugging symbols (kernel probes, frame pointers, filesystem debugging etc.)
#   * Virtualization (XEN and KVM)
#   * Security modules (AppArmor and SELinux)
#   * IPV6 protocol
#   * Verbosity

pkgbase='linux-zen'
pkgname=('linux-zen' 'linux-headers-zen')
pkgver=20121025
_axe_pkgrel=1
pkgrel=991.${_axe_pkgrel}.1axe
pkgdesc='Featureful kernel including various new features, code and optimizations to better suit Desktops and Laptops'
groups=('axis' 'base')
url='http://www.zen-kernel.org'
license=('GPL2')
arch=('i686' 'x86_64')
makedepends=('git')
options=('!strip' '!docs')
source=('setlocalversion.patch'
        'config.x86' 'config.x64'
	    "${pkgname}.preset")
md5sums=('8244252d253da404ce5b5897a048e56b'
         '71657b0ccc556d390472616b22c403bd'
         'e69f077909482cf9b1c12ecaf1093852'
         'cdfba30144d8d0cdea13551d20cf1186')
# _gitroot='git://zen-kernel.org/kernel/zen-stable.git'
_gitroot='git://github.com/damentz/zen-kernel.git'
_gitname='zen-sources'
_gitbranch='3.4/master'
_interactive=y

build() {
	_CORES="$(grep processor /proc/cpuinfo | wc -l)"
	let _CORES="${_CORES}+1"

	if [ -d "${_gitname}" ];then
		cd "${srcdir}/${_gitname}"
		msg2 "Cleaning up..."
		make -j ${_CORES} mrproper

        msg2 "Updating local tree..."
        git pull --depth=1 origin "${_gitbranch}"
	else
		cd "${srcdir}"
		msg2 "Cloning initial copy of ${_gitname}..."
		git clone --depth=1 -b "${_gitbranch}" "${_gitroot}" "${_gitname}"
	fi
	
	msg2 "Preparing for build..."
	cd "${srcdir}/${_gitname}"
	# don't run depmod on 'make install'. We'll do this ourselves in packaging
	sed -i '2iexit 0' scripts/depmod.sh
    # local version patch so '+' is not appended
    patch -p0 -i "${srcdir}/setlocalversion.patch" || true
    
    if [ "${CARCH}" = "i686" ]; then
		cp -f "${srcdir}/config.x86" "${srcdir}/${_gitname}/.config"
	else
        cp -f "${srcdir}/config.x64" "${srcdir}/${_gitname}/.config"
    fi

    if [ "${_interactive}" = "y" ];then
        msg2 "Running interactive configuration..."
        make -j ${_CORES} menuconfig
	fi
    
	msg2 "Building kernel..."
	make -j ${_CORES} bzImage

	msg2 "Building modules..."
	make -j ${_CORES} modules
}

package_linux-zen() {
	depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio')
	optdepends=('linux-headers-zen: to build third party modules'
	            'crda: to set the correct wireless channels of your country')
    provides=('linux-zen')
    conflicts=('linux-zen')
    replaces=('linux-zen')
	install="${pkgname}.install"

	cd "${srcdir}/${_gitname}"
	msg2 "Determining kernel name..."
	_kernver="$(make -j ${_CORES} kernelrelease)"
	msg2 "Kernel release name is: ${_kernver}"

	msg2 "Installing kernel image..."
	install -D -m644 "arch/x86/boot/bzImage" "${pkgdir}/boot/vmlinuz-${pkgname}"
    install -D -m644 "vmlinux" "${pkgdir}/usr/src/linux-${_kernver}/vmlinux"

	msg2 "Installing modules (and firmware files)..."
	# Fix for rebuilding packages
    mkdir -p "${pkgdir}/lib/firmware"
    make -j ${_CORES} INSTALL_MOD_STRIP=1 INSTALL_MOD_PATH="${pkgdir}" modules_install

	if [ -d "${pkgdir}/lib/firmware" ]; then
		msg2 "Removing firmware files..."
		rm -rf "${pkgdir}/lib/firmware"
	fi
	
	msg2 "Compressing kernel modules with gzip..."
	find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;

	# make room for external modules
	if [ -d "${pkgdir}/lib/modules/extramodules-*" ]; then
		rm -rf "${pkgdir}/lib/modules/extramodules-*"
	fi

	ln -s "../extramodules-${_kernver}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
	# add real version for building modules and running depmod from post_install/upgrade
	mkdir -p "${pkgdir}/lib/modules/extramodules-${_kernver}"
	echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_kernver}/version"

	#msg2 "Installing System.map..."
	#install -m644 "System.map" "$pkgdir/boot/System.map26"

	msg2 "Removing links to source and build directory..."
	rm -rf "${pkgdir}/lib/modules/${_kernver}/"{build,source}

	# Now we call depmod...
    msg2 "Updating modules dependencies..."
	depmod -b "${pkgdir}" -F System.map "${_kernver}"
        
	# move module tree /lib -> /usr/lib
    msg2 "Moving /lib to /usr/lib..."
	mv "${pkgdir}/lib" "${pkgdir}/usr"
    
    msg2 "Updating kernel version in install script..."
	install -D -m644 "${srcdir}/${pkgname}.preset" "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"
	sed -i "s|^ALL_kver=.*$|ALL_kver=${_kernver}|" "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"
    sed -i "s|^kernel_version=.*$|kernel_version=${_kernver}|" "${startdir}/${pkgname}.install"
    sed -i "s|^kernel_name=.*$|kernel_name=${pkgbase}|" "${startdir}/${pkgname}.install"
    	
}

package_linux-headers-zen() {
    pkgdesc="Header files and scripts for building modules for linux-zen"
	depends=('linux-zen')
	provides=('linux-headers-zen')
    conflicts=('linux-headers-zen')
    replaces=('linux-headers-zen')
	
	cd "${srcdir}/${_gitname}"
	_srcdir="/usr/src/linux-${_kernver}"

	msg2 "Installing files necessary for 3rd party modules..."
	mkdir -p "${pkgdir}/${_srcdir}/"{arch/x86,include}
	
	install -D -m644 "Makefile" "${pkgdir}/${_srcdir}/Makefile"
	install -D -m644 "kernel/Makefile" "${pkgdir}/${_srcdir}/kernel/Makefile"
	install -D -m644 ".config" "${pkgdir}/${_srcdir}/.config"
	install -D -m644 "Module.symvers" "${pkgdir}/${_srcdir}/Module.symvers"
	install -D -m644 "include/linux/version.h" "${pkgdir}/${_srcdir}/include/linux/version.h"
	install -D -m644 "arch/x86/kernel/asm-offsets.s" "${pkgdir}/${_srcdir}/arch/x86/kernel/asm-offsets.s"
	install -D -m644 "arch/x86/Makefile" "${pkgdir}/${_srcdir}/arch/x86/Makefile"

	if [ "$CARCH" = "i686" ]; then
		install -D -m644 "arch/x86/Makefile_32.cpu" "${pkgdir}/${_srcdir}/arch/x86/Makefile_32.cpu"
	fi

	cp -a "scripts" "${pkgdir}/${_srcdir}"
	cp -a "scripts" "${pkgdir}/${_srcdir}"
	cp -a "include" "${pkgdir}/${_srcdir}"
	cp -a "include/"{generated,config} "${pkgdir}/${_srcdir}/include"
	cp -a "arch/x86/include" "${pkgdir}/${_srcdir}/arch/x86"
	cp -a "arch/x86/include" "${pkgdir}/${_srcdir}/arch/x86"

	{
		find drivers -type f -name "*.h";
		find . -type f -name "Kconfig*";
	} | while read file; do
		install -D -m644 "${file}" "${pkgdir}${_srcdir}/${file}"
	done

	msg2 "Fixing permissions on scripts directory..."
	chmod og-w -R "${pkgdir}/${_srcdir}/scripts"

	msg2 "Creating symlinks..."
	mkdir -p "${pkgdir}/lib/modules/${_kernver}"
	ln -s "${_srcdir}" "${pkgdir}/lib/modules/${_kernver}/build"
	ln -s "${_srcdir}" "${pkgdir}/lib/modules/${_kernver}/source"
}
