#!/bin/sh
# system one time tasks
# /etc/runit/1
PATH="/command:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"


source /etc/runit/start.conf
source /etc/runit/runitfunctions



# TODO: performa a proper runtime check
# 
# [ -x "$(type -P fsck)" ]
# [ -x "$(type -P dmraid)" ]
# [ -x "$(type -P btrfs)" ]
# [ -x "$(type -P lvm)" ]
# [ -x "$(type -P ip)" ]

msg_headline "Initializing system..."



################################## 1 ##################################
# mount the API filesystems
mkdir --parents /{proc,sys,run,dev}
mkdir --parents /dev/{pts,shm}
mountpoint -q /proc    || mount -t proc proc /proc -o nosuid,noexec,nodev
mountpoint -q /sys     || mount -t sysfs sys /sys -o nosuid,noexec,nodev
mountpoint -q /run     || mount -t tmpfs run /run -o mode=0755,nosuid,nodev
mountpoint -q /dev     || mount -t devtmpfs dev /dev -o mode=0755,nosuid
mountpoint -q /dev/pts || mount -n -t devpts devpts /dev/pts -o mode=0620,gid=5,nosuid,noexec
mountpoint -q /dev/shm || mount -n -t tmpfs shm /dev/shm -o mode=1777,nosuid,nodev


################################## 2 ##################################
# Log all console messages
bootlogd -p /run/bootlogd.pid


################################## 3 ##################################
# remount root ro to allow for fsck later on, we remount now to
# make sure nothing can open files rw on root which would block a remount
if [[ ! -e /run/initramfs/root-fsck ]]; then
	findmnt / --options ro &>/dev/null ||
		exec_cmd "Mounting root read-only" mount -o remount,ro 
fi

################################## 4 ##################################
#sysctl
exec_cmd "Configuring Kernel parameters" sysctl --system --write

################################## 5 ##################################
#udev
exec_cmd "Starting UDev daemon" int_udev_start

################################## 6 ##################################
#user defined modules
if [ -n "${MODULES[*]}" ];then
    exec_cmd "Loading user-specified modules" modprobe --all --use-blacklist "${MODULES[@]}"
fi

################################## 7 ##################################
#udev settle
exec_cmd "Waiting for UDev uevents to be processed" udevadm settle

################################## 8 ##################################
#HW  clock
case "${HARDWARE_CLOCK}" in
    utc) exec_cmd "Adjusting system clock" int_hwclock_set --noadjfile --utc ;;
    localtime) exec_cmd "Adjusting system clock" int_hwclock_set --noadjfile --localtime ;;
esac

################################## 9 ##################################
#swap
exec_cmd "Activating Swap" swapon --all


################################## 10 ##################################
# FakeRAID devices detection
[[ "${USE_DMRAID}" = [Yy][Ee][Ss] && -x $(type -P dmraid) ]] && exec_cmd "Activating FakeRAID arrays" dmraid -i -ay



################################## 11 ##################################
# btfrs detection
if [ "${USE_BTRFS}" = [yY][eE][sS] ];then
	exec_cmd "Activating BTRFS volumes" btrfs device scan
fi


################################## 12 ##################################
# lvm detection
if [ "${USE_LVM}" = [yY][eE][sS] ] && [ -d "/sys/block" ];then
    exec_cmd "Activating LVM2 groups" vgchange --sysinit --activate y
	exec_cmd "Activating monitoring of LVM2 groups" vgchange --monitor y
fi

################################## 13 ##################################
# filesystem check and reeboot if necessary
exec_cmd "Checking filesystems" int_fsck_all


################################## 14 ##################################
# remount
exec_cmd "Remounting Root read-write" mount --options remount,rw /

################################## 15 ##################################
# remove leftovers
exec_cmd "Removing leftover files" int_leftovers_remove

################################## 16 ##################################
# random seed
if [ -f "${RANDOM_SEED}" ];then
	exec_cmd "Restoring random seed" cp "${RANDOM_SEED}" /dev/urandom
fi

################################## 17 ##################################
# setup consoles
if [ "${LANG: -5}" = "UTF-8" ]; then
	msg_busy "Setting Consoles to UTF-8 mode"
    # UTF-8 consoles are default since 2.6.24 kernel
    # this code is needed not only for older kernels,
    # but also when user has set vt.default_utf8=0 but LANG is *.UTF-8.
    for i in /dev/tty[0-9]*;do
        kbd_mode -u -C "${i}"
        printf "\e%%G" > "${i}"
    done
    echo 1 >| /sys/module/vt/parameters/default_utf8
    msg_status
else
	msg_busy "Setting Consoles to legacy mode"
    # make non-UTF-8 consoles work on 2.6.24 and newer kernels
    for i in /dev/tty[0-9]*;do
        kbd_mode -u -C "${i}"
        printf "\e%%G" > "${i}"
    done
    echo 0 >| /sys/module/vt/parameters/default_utf8
    msg_status
fi

################################## 18 ##################################
# setup locale
msg_busy "Setting system locale"
localevars=("${LC_CTYPE}" "${LC_COLLATE}" "${LC_TIME}" "${LC_NUMERIC}"
            "${LC_MONETARY}" "${LC_MESSAGES}" "${LC_ALL}")
            
export LANG="${LANG:-C}"     
for var in localevars;do
    if [ -n "${var}" ]; then
        export ${var}
    else
        unset ${var}
    fi
done
unset localevars
msg_status

################################## 19 ##################################
# setup timezone
if [ -n "${TIME_ZONE}" ]; then
    exec_cmd "Setting time zone: ${TIME_ZONE}" int_timezone_set "${TIME_ZONE}"
fi

################################## 20 ##################################
# setup console font and font-map
if [ -n "${CONSOLE_FONT}" ];then
    exec_cmd "Loading Console font: ${CONSOLE_FONT}" setfont -u "${CONSOLE_FONT}" -C /dev/tty[0-9]*
fi

if [ -n "${CONSOLE_MAP}" ];then
    exec_cmd "Loading Console map: ${CONSOLE_MAP}" setfont -m "${CONSOLE_MAP}" -C /dev/tty[0-9]*
fi

################################## 21 ##################################
# set keymap
if [ -n "${KEYMAP}" ];then
    exec_cmd "Loading Keyboard map: ${KEYMAP}" loadkeys "${KEYMAP}"
fi

################################## 22 ##################################
# set hostname
if [ -n "${HOSTNAME}" ]; then
	exec_cmd "Setting hostname: ${HOSTNAME}" hostname "${HOSTNAME}"
fi

################################## 23 ##################################
# set lo
if [ -d "/sys/class/net/lo" ];then
    exec_cmd "Bringing up loopback interface" ip link set up dev lo
fi

################################## 24 ##################################
# set binary formats
exec_cmd "Loading additional binary formats" /runit/binfmt

################################## 25 ##################################
# set remounting filesystems
exec_cmd "Mounting local filesystems" int_mount_all


################################## 26 ##################################
# last shit
exec_cmd "Stopping bootlogd daemon" int_bootlogd_stop
exec_cmd "Saving dmesg log" int_dmesg_save

