#!/bin/sh
# system one time tasks
# /etc/runit/1

export PATH="/command:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"


# clear the TZ envvar, so daemons always respect /etc/localtime
unset TZ

# These can be overridden/reused for customizations like shutdown/loop-fsck.
NETFS="nfs,nfs4,smbfs,cifs,codafs,ncpfs,shfs,fuse,fuseblk,glusterfs,davfs,fuse.glusterfs"
NO_NETFS="no${NETFS//,/,no}"
APIFS="devpts,devtmpfs,proc,sysfs,tmpfs"
NO_APIFS="no${APIFS//,/,no}"

RANDOM_SEED=/var/lib/misc/random-seed

# prefixes
PREFIX_HL=" > "
PREFIX_MSG=" * "
PREFIX_STD="   >> "

# set colors
if [ "${USE_COLOR}" = "yes" ] && [ -t 0 ];then
    C_BLACK='\e[1;30m'
    C_RED='\e[1;31m'
    C_GREEN='\e[1;32m'
    C_YELLOW='\e[1;33m'
    C_BLUE='\e[1;34m'
    C_PURPLE='\e[1;35m'
    C_CYAN='\e[1;36m'
    C_WHITE='\e[1;37m'
    C_CLEAR='\e[m'
fi


#############################################################
#                          Messages                         #
#############################################################

msg_banner() {
    printf "${C_BLUE}
 __         __ __                    __         __         
|__|.-----.|__|  |_.-----.----.----.|__|.-----.|  |_.-----.
|  ||     ||  |   _|__ --|  __|   _||  ||  _  ||   _|__ --|
|__||__|__||__|____|_____|____|__|  |__||   __||____|_____|
                                        |__|        
${C_CLEAR}"
}

msg_headline() {
	printf "\n${C_BLUE}${PREFIX_HL}${C_WHITE}${1}${C_CLEAR}\n\n"
}

msg_busy() {
	printf "${C_CYAN}${PREFIX_MSG}${C_WHITE}${1}${C_CLEAR}"
}

msg_ok() {
    printf "\r${C_BLUE}${PREFIX_MSG}${C_WHITE}${1}${C_CLEAR}\n"
}

msg_fail() {
    printf "\r${C_RED}${PREFIX_MSG}${C_WHITE}${1}${C_CLEAR}\n"
}

msg_die() {
	msg_fail "${1}"
	exit "${2:-1}"
}

msg_status() {
    if [ "${?}" = "${1:-0}" ];then
        msg_ok
    else
        msg_fail
    fi
}

#############################################################
#                      Common routines                      #
#############################################################
# execute and output stderr without cluttering stdout
# usage: exec_cmd "<message>" <command>
exec_cmd() {
    local msg="${1}"
    local cmd="${@:2}"
    local std
    local line
    
    msg_busy "${msg}"
    std=$(${cmd} 2>&1)
    msg_status
    
    if [ -n "${std}" ];then
        printf "${std}" | while IFS= read -r line;do
            printf "${C_YELLOW}   >> ${C_WHITE}${line}${C_CLEAR}\n"
        done
    fi
}

# check if string is present in array
# usage : chk_in_array <needle> <haystack>
chk_in_array() {
	local needle=$1; shift
	local item
	for item; do
		if [ "${item}" = "${needle}" ];then
            return 0
        fi
	done
	return 1
}

#############################################################
#                  System initialization                    #
#############################################################
# stop bootlogd daemon
axe_bootlogd_stop() {
	if [ -f "/run/bootlogd.pid" ];then
        touch /var/log/boot
        kill $(< /run/bootlogd.pid)
        rm /run/bootlogd.pid
    fi
}

# start and trigger UDev daemon
axe_udev_start() {
	udevd --daemon
	udevadm trigger --action=add --type=subsystems
    udevadm trigger --action=add --type=devices
}

# setup system hardware clock

# check local filesystems
axe_fsck_all() {
    local fsck_options

	if [[ -f /forcefsck ]] || chk_in_array forcefsck $(< /proc/cmdline); then
		fsck_options="-f"
	elif [[ -f /fastboot ]] || chk_in_array fastboot $(< /proc/cmdline); then
		return 0
	elif [[ -e /run/initramfs/root-fsck ]]; then
		fsck_options="-M"
	fi

	fsck -T -A -P -a -t "${NO_NETFS}" ${fsck_options}

    # Automatic reboot after fsck (if needed)
	# Ignore conditions 'FS errors corrected' and 'Cancelled by the user'
	if [ "${?}" = "2" ]; then
		printf "\n\n${C_RED}********************** ${C_YELLOW}REBOOT REQUIRED${C_RED} *********************${C_CLEAR}\n"
		printf "${C_RED}*${C_WHITE}                                                          ${C_RED}*${C_CLEAR}\n"
		printf "${C_RED}*${C_WHITE} The system will be rebooted automatically in 15 seconds. ${C_RED}*${C_CLEAR}\n"
		printf "${C_RED}*${C_WHITE}                                                          ${C_RED}*${C_CLEAR}\n"
		printf "${C_RED}************************************************************${C_CLEAR}\n\n"
		sleep 15
        msg_headline "Automatic reboot in progress..."
        umount --all
        mount --options remount,ro /
        reboot -f
        exit 0
	elif [ "${?}" = "4" ] || [ "${?}" = "8" ]; then
		printf "\n\n${C_RED}*****************  ${C_YELLOW}FILESYSTEM CHECK FAILED${C_RED}  ****************${C_CLEAR}\n"
		printf "${C_RED}*${C_WHITE}                                                          ${C_RED}*${C_CLEAR}\n"
		printf "${C_RED}*${C_WHITE}  Please repair manually and reboot. Note that the root   ${C_RED}*${C_CLEAR}\n"
		printf "${C_RED}*${C_WHITE}  file system is currently mounted read-only. To remount  ${C_RED}*${C_CLEAR}\n"
		printf "${C_RED}*${C_WHITE}  it read-write type: ${C_RED}mount -o remount,rw /${C_WHITE}               ${C_RED}*${C_CLEAR}\n"
		printf "${C_RED}*${C_WHITE}  When you exit the maintenance shell, the system will    ${C_RED}*${C_CLEAR}\n"
		printf "${C_RED}*${C_WHITE}  reboot automatically.                                   ${C_RED}*${C_CLEAR}\n"
		printf "${C_RED}*${C_WHITE}                                                          ${C_RED}*${C_CLEAR}\n"
		printf "${C_RED}************************************************************${C_CLEAR}\n\n"
		sulogin -p
	fi
}

# removing leftover files
axe_leftovers_remove() {
	/etc/runit/tmpfiles --create --remove
}

# setup system time zone
axe_timezone_set() {
	if [ "$(readlink /etc/localtime)" != "/usr/share/zoneinfo/${1}" ]; then
        ln --symbolic --force "/usr/share/zoneinfo/${1}" "/etc/localtime"
	fi
}

# save boot log to file for reference
axe_dmesg_save() {
    if [ "$(</proc/sys/kernel/dmesg_restrict)" = "1" ]; then
        install -Tm 0600 <( dmesg ) /var/log/dmesg.log
    else
        install -Tm 0644 <( dmesg ) /var/log/dmesg.log
    fi
}

# mount all local filesystems
axe_mount_all() {
	mount --all --types "nosysfs,${NO_NETFS}"
}

axe_hwclock_set() {
    if [ -n "${TIME_ZONE}" ];then
        env TZ="${TIME_ZONE}" hwclock --systz ${@}
    else
        hwclock ${@}
    fi
}

if [[ -s /etc/runit/startup.conf ]]; then
    source /etc/runit/startup.conf
else
	msg_ok '/etc/runit/startup.conf not found writing default settings'
fi


# TODO: performa a proper runtime check
# 
# [ -x "$(type -P fsck)" ]
# [ -x "$(type -P dmraid)" ]
# [ -x "$(type -P btrfs)" ]
# [ -x "$(type -P lvm)" ]
# [ -x "$(type -P ip)" ]

msg_headline "Initializing system..."



################################## 1 ##################################
# mount the API filesystems
mkdir --parents /{proc,sys,run,dev}
mkdir --parents /dev/{pts,shm}
mountpoint -q /proc    || mount -t proc proc /proc -o nosuid,noexec,nodev
mountpoint -q /sys     || mount -t sysfs sys /sys -o nosuid,noexec,nodev
mountpoint -q /run     || mount -t tmpfs run /run -o mode=0755,nosuid,nodev
mountpoint -q /dev     || mount -t devtmpfs dev /dev -o mode=0755,nosuid
mountpoint -q /dev/pts || mount -n -t devpts devpts /dev/pts -o mode=0620,gid=5,nosuid,noexec
mountpoint -q /dev/shm || mount -n -t tmpfs shm /dev/shm -o mode=1777,nosuid,nodev


################################## 2 ##################################
# Log all console messages
bootlogd -p /run/bootlogd.pid


################################## 3 ##################################
# remount root ro to allow for fsck later on, we remount now to
# make sure nothing can open files rw on root which would block a remount
if [[ ! -e /run/initramfs/root-fsck ]]; then
	findmnt / --options ro &>/dev/null ||
		exec_cmd "Mounting root read-only" mount -o remount,ro 
fi

################################## 4 ##################################
#sysctl
exec_cmd "Configuring Kernel parameters" sysctl --system --write

################################## 5 ##################################
# start and trigger UDev daemon
exec_cmd "Starting UDev daemon" axe_udev_start

################################## 6 ##################################
#user defined modules
if [ -n "${MODULES[*]}" ];then
    exec_cmd "Loading user-specified modules" modprobe --all --use-blacklist "${MODULES[@]}"
fi

################################## 7 ##################################
#udev settle
exec_cmd "Waiting for UDev uevents to be processed" udevadm settle

################################## 8 ##################################
#HW  clock
case "${HARDWARE_CLOCK}" in
    utc) exec_cmd "Adjusting system clock" axe_hwclock_set --noadjfile --utc ;;
    localtime) exec_cmd "Adjusting system clock" axe_hwclock_set --noadjfile --localtime ;;
esac


################################## 9 ##################################
#swap
exec_cmd "Activating Swap" swapon --all


################################## 10 ##################################
# FakeRAID devices detection
[[ "${USE_DMRAID}" = [Yy][Ee][Ss] && -x $(type -P dmraid) ]] && exec_cmd "Activating FakeRAID arrays" dmraid -i -ay



################################## 11 ##################################
# btfrs detection
if [ "${USE_BTRFS}" = [yY][eE][sS] ];then
	exec_cmd "Activating BTRFS volumes" btrfs device scan
fi


################################## 12 ##################################
# lvm detection
if [ "${USE_LVM}" = [yY][eE][sS] ] && [ -d "/sys/block" ];then
    exec_cmd "Activating LVM2 groups" vgchange --sysinit --activate y
	exec_cmd "Activating monitoring of LVM2 groups" vgchange --monitor y
fi

################################## 13 ##################################
# filesystem check and reeboot if necessary
exec_cmd "Checking filesystems" axe_fsck_all


################################## 14 ##################################
# remount
exec_cmd "Remounting Root read-write" mount --options remount,rw /

################################## 15 ##################################
# remove leftovers
exec_cmd "Removing leftover files" axe_leftovers_remove

################################## 16 ##################################
# random seed
if [ -f "${RANDOM_SEED}" ];then
	exec_cmd "Restoring random seed" cp "${RANDOM_SEED}" /dev/urandom
fi

################################## 17 ##################################
# last shit
exec_cmd "Stopping bootlogd daemon" axe_bootlogd_stop


################################## 17 ##################################
# last shit
msg_busy "Saving dmesg log"
	if [[ -e /proc/sys/kernel/dmesg_restrict ]] &&
		(( $(< /proc/sys/kernel/dmesg_restrict) == 1 )); then
		install -Tm 0600 <( dmesg ) /var/log/dmesg.log
	else
		install -Tm 0644 <( dmesg ) /var/log/dmesg.log
	fi
(( $? == 0 )) && msg_ok || msg_fail


################################## 17 ##################################
# setup consoles
if [ "${LANG: -5}" = "UTF-8" ]; then
	msg_busy "Setting Consoles to UTF-8 mode"
    # UTF-8 consoles are default since 2.6.24 kernel
    # this code is needed not only for older kernels,
    # but also when user has set vt.default_utf8=0 but LANG is *.UTF-8.
    for i in /dev/tty[0-9]*;do
        kbd_mode -u -C "${i}"
        printf "\e%%G" > "${i}"
    done
    echo 1 >| /sys/module/vt/parameters/default_utf8
    msg_status
else
	msg_busy "Setting Consoles to legacy mode"
    # make non-UTF-8 consoles work on 2.6.24 and newer kernels
    for i in /dev/tty[0-9]*;do
        kbd_mode -u -C "${i}"
        printf "\e%%G" > "${i}"
    done
    echo 0 >| /sys/module/vt/parameters/default_utf8
    msg_status
fi

################################## 18 ##################################
# setup locale
msg_busy "Setting system locale"
localevars=("${LC_CTYPE}" "${LC_COLLATE}" "${LC_TIME}" "${LC_NUMERIC}"
            "${LC_MONETARY}" "${LC_MESSAGES}" "${LC_ALL}")
            
export LANG="${LANG:-C}"     
for var in localevars;do
    if [ -n "${var}" ]; then
        export ${var}
    else
        unset ${var}
    fi
done
unset localevars
msg_status

################################## 19 ##################################
# setup timezone
if [ -n "${TIME_ZONE}" ]; then
    exec_cmd "Setting time zone: ${TIME_ZONE}" axe_timezone_set "${TIME_ZONE}"
fi

################################## 20 ##################################
# setup console font and font-map
if [ -n "${CONSOLE_FONT}" ];then
    exec_cmd "Loading Console font: ${CONSOLE_FONT}" setfont -u "${CONSOLE_FONT}" -C /dev/tty[0-9]*
fi

if [ -n "${CONSOLE_MAP}" ];then
    exec_cmd "Loading Console map: ${CONSOLE_MAP}" setfont -m "${CONSOLE_MAP}" -C /dev/tty[0-9]*
fi

################################## 21 ##################################
# set keymap
if [ -n "${KEYMAP}" ];then
    exec_cmd "Loading Keyboard map: ${KEYMAP}" loadkeys "${KEYMAP}"
fi

################################## 22 ##################################
# set hostname
if [ -n "${HOSTNAME}" ]; then
	exec_cmd "Setting hostname: ${HOSTNAME}" hostname "${HOSTNAME}"
fi

################################## 23 ##################################
# set lo
if [ -d "/sys/class/net/lo" ];then
    exec_cmd "Bringing up loopback interface" ip link set up dev lo
fi

################################## 24 ##################################
# set binary formats
exec_cmd "Loading additional binary formats" /etc/runit/binfmt

################################## 25 ##################################
# set remounting filesystems
exec_cmd "Mounting local filesystems" axe_mount_all


################################## 26 ##################################
# last shit
exec_cmd "Stopping bootlogd daemon" axe_bootlogd_stop
exec_cmd "Saving dmesg log" axe_dmesg_save

